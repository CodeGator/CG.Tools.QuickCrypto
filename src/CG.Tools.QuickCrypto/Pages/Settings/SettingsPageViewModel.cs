
using MudBlazor;

namespace CG.Tools.QuickCrypto.Pages.Settings;

/// <summary>
/// This class is the view-model for the <see cref="SettingsPage"/> page.
/// </summary>
public class SettingsPageViewModel : ObservableObject
{
    // *******************************************************************
    // Fields.
    // *******************************************************************

    #region Fields

    /// <summary>
    /// This field backs the <see cref="Error"/> property.
    /// </summary>
    internal protected string _error = "";

    /// <summary>
    /// This field backs the <see cref="Password"/> property.
    /// </summary>
    internal protected string _password = "";

    /// <summary>
    /// This field backs the <see cref="Salt"/> property.
    /// </summary>
    internal protected string _salt = "";

    /// <summary>
    /// This field backs the <see cref="Iterations"/> property.
    /// </summary>
    internal protected int _iterations;

    /// <summary>
    /// This field contains the dialog service for this view-model.
    /// </summary>
    internal protected readonly IDialogService _dialogService;

    /// <summary>
    /// This field contains the snackbar service for this view-model.
    /// </summary>
    internal protected readonly ISnackbar _snackbar;

    /// <summary>
    /// This field contains the secure storage service for this view-model.
    /// </summary>
    internal protected readonly ISecureStorage _secureStorage;

    #endregion

    // *******************************************************************
    // Properties.
    // *******************************************************************

    #region Properties

    /// <summary>
    /// This property contains any error messages generated by the view-model.
    /// </summary>
    public string Error
    {
        get { return _error; }
        set { SetProperty(ref _error, value); }
    }

    /// <summary>
    /// This property contains the current crypto password
    /// </summary>
    public string Password
    {
        get { return _password; }
        set { SetProperty(ref _password, value); }
    }

    /// <summary>
    /// This property contains the current crypto salt
    /// </summary>
    public string Salt
    {
        get { return _salt; }
        set { SetProperty(ref _salt, value); }
    }

    /// <summary>
    /// This property contains the current crypto iterations
    /// </summary>
    public int Iterations
    {
        get { return _iterations; }
        set { SetProperty(ref _iterations, value); }
    }

    #endregion

    // *******************************************************************
    // Constructors.
    // *******************************************************************

    #region Constructors

    /// <summary>
    /// This constructor creates a new instance of the <see cref="SettingsPageViewModel"/>
    /// class.
    /// </summary>
    /// <param name="dialogService">The dialog service to use with this 
    /// view-model.</param>
    /// <param name="snackbar">The snackbar service to use with this view-model.</param>
    /// <param name="secureStorage">The secure storage service to use with
    /// this view-model.</param>
    public SettingsPageViewModel(
        IDialogService dialogService,
        ISnackbar snackbar,
        ISecureStorage secureStorage
        )
    {
        // Save the reference(s).
        _dialogService = dialogService;
        _snackbar = snackbar;
        _secureStorage = secureStorage;
    }

    #endregion

    // *******************************************************************
    // Public methods.
    // *******************************************************************

    #region Public methods

    /// <summary>
    /// This method generates a random set of credentials and stores the 
    /// results in the <see cref="Password"/> and <see cref="Salt"/>
    /// properties.
    /// </summary>
    /// <returns>A task to perform the operation.</returns>
    public virtual async Task OnGenerateRandomCredentials()
    {
        try
        {
            // Clear any old error.
            Error = "";

            // Tell the caller what we are about to do.
            var result = await _dialogService.ShowMessageBox(
                "Stop!",
                markupMessage: new MarkupString("<p>This action will " +
                "overwrite the current password and salt!</p><p>" +
                "Are you sure you want to do that?</p>"),
                yesText: "OK",
                cancelText: "Cancel"
                );

            // Did the caller accept?
            if (result != null && result.Value)
            {
                // Create a random number generator.
                var rng = RandomNumberGenerator.Create();

                // Create a random password and salt.
                Password = rng.NextString(rng.Next(8, 25));
                Salt = rng.NextString(rng.Next(8, 25));

                // Store the values.
                await _secureStorage.SetAsync(Globals.Storage.Password, Password);
                await _secureStorage.SetAsync(Globals.Storage.Salt, Salt);

                // Tell the caller what we did.
                _snackbar.Add(
                    "A new password and salt were generated.",
                    Severity.Info
                    );
            }
        }
        catch (Exception ex)
        {
            // Save the error.
            Error = ex.Message;
        }
    }

    #endregion
}
