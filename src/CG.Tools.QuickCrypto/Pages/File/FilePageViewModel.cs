
using MudBlazor;

namespace CG.Tools.QuickCrypto.Pages.File;

/// <summary>
/// This class is the view-model for the <see cref="Index"/> page.
/// </summary>
public class FilePageViewModel : ObservableObject
{
    // *******************************************************************
    // Fields.
    // *******************************************************************

    #region Fields

    /// <summary>
    /// This field backs the <see cref="Error"/> property.
    /// </summary>
    internal protected string _error;

    /// <summary>
    /// This field backs the <see cref="BrowserFile"/> property.
    /// </summary>
    internal protected IBrowserFile _browserFile;

    /// <summary>
    /// This field contains the file saver service for this view-model.
    /// </summary>
    internal protected readonly IFileSaver _fileSaver;

    /// <summary>
    /// This field contains the snackbar service for this view-model.
    /// </summary>
    internal protected readonly ISnackbar _snackbar;

    /// <summary>
    /// This field contains the secure storage service for this view-model.
    /// </summary>
    internal protected readonly ISecureStorage _secureStorage;

    /// <summary>
    /// This field contains the cryptography service for this view-model.
    /// </summary>
    internal protected readonly Cryptography _cryptography;

    #endregion

    // *******************************************************************
    // Properties.
    // *******************************************************************

    #region Properties

    /// <summary>
    /// This property contains any error messages generated by the view-model.
    /// </summary>
    public string Error
    {
        get { return _error; }
        set { SetProperty(ref _error, value); }
    }

    /// <summary>
    /// This property contains the currently uploaded browser file.
    /// </summary>
    public IBrowserFile BrowserFile
    {
        get { return _browserFile; }
        set { SetProperty(ref _browserFile, value); }
    }

    #endregion

    // *******************************************************************
    // Constructors.
    // *******************************************************************

    #region Constructors

    /// <summary>
    /// This constructor creates a new instance of the <see cref="FilePageViewModel"/>
    /// class.
    /// </summary>
    /// <param name="fileSaver">The file saver service to use with this 
    /// view-model.</param>
    /// <param name="secureStorage">The secure storage service to use 
    /// with this view-model.</param>
    /// <param name="cryptography">The cryptography service to use with 
    /// this view-model.</param>
    /// <param name="snackbar">The snackbar service to use with this view-model.</param>
    public FilePageViewModel(
        IFileSaver fileSaver,
        ISecureStorage secureStorage,
        Cryptography cryptography,
        ISnackbar snackbar
        )
    {
        // Save the reference(s).
        _fileSaver = fileSaver;
        _secureStorage = secureStorage;
        _cryptography = cryptography;   
        _snackbar = snackbar;
    }

    #endregion

    // *******************************************************************
    // Public methods.
    // *******************************************************************

    #region Public methods

    /// <summary>
    /// This method encrypts the currently uploaded file.
    /// </summary>
    /// <returns>A task to perform the operation.</returns>
    public virtual async Task EncryptFile()
    {
        try
        {
            // Clear any old error(s).
            Error = "";

            // Fetch the credentials.
            var password = await SecureStorage.GetAsync(Globals.Storage.Password);
            var salt = await SecureStorage.GetAsync(Globals.Storage.Salt);
            var iterations = await SecureStorage.GetAsync(Globals.Storage.Iterations);

            // Sanity check the credentials.
            if (string.IsNullOrEmpty(password) ||
                string.IsNullOrEmpty(salt) ||
                string.IsNullOrEmpty(iterations))
            {
                Error = "The credentials are missing in the settings!";
                return; // Nothing to do!
            }

            // Generate the key and IV.
            var keyAndIV = await _cryptography.GenerateKeyAndIVAsync(
                password,
                salt,
                int.Parse(iterations)
                );

            // Open the file.
            using var rawStream = _browserFile.OpenReadStream();

            // Encrypt the file.
            using var encryptedStream = await _cryptography.AesEncryptAsync(
                keyAndIV.Item1,
                keyAndIV.Item2,
                rawStream
                );

            // Prompt the user to save the results.
            var result = await _fileSaver.SaveAsync(
                _browserFile.Name,
                encryptedStream,
                default
                );

            // Did we succeed?
            if (result.IsSuccessful)
            {
                // Let the caller know what happened.
                _snackbar.Add(
                    $"The file: {_browserFile.Name} was encrypted and saved.",
                    Severity.Success
                    );
                // Don't need this anymore.
                _browserFile = null;
            }
        }
        catch (Exception ex)
        {
            // Save the error message.
            Error = ex.Message;
        }
    }

    // *******************************************************************

    /// <summary>
    /// This method decrypts the currently uploaded file.
    /// </summary>
    /// <returns>A task to perform the operation.</returns>
    public virtual async Task DecryptFile()
    {
        try
        {
            // Clear any old error(s).
            Error = "";

            // Fetch the credentials.
            var password = await SecureStorage.GetAsync(Globals.Storage.Password);
            var salt = await SecureStorage.GetAsync(Globals.Storage.Salt);
            var iterations = await SecureStorage.GetAsync(Globals.Storage.Iterations);

            // Sanity check the credentials.
            if (string.IsNullOrEmpty(password) || 
                string.IsNullOrEmpty(salt) ||
                string.IsNullOrEmpty(iterations)) 
            {
                Error = "The credentials are missing in the settings!";
                return; // Nothing to do!
            }

            // Generate the key and IV.
            var keyAndIV = await _cryptography.GenerateKeyAndIVAsync(
                password,
                salt,
                int.Parse(iterations)
                );

            // Open the file.
            using var encryptedStream = _browserFile.OpenReadStream();

            // Decrypt the file.
            using var decryptedStream = await _cryptography.AesDecryptAsync(
                keyAndIV.Item1,
                keyAndIV.Item2,
                encryptedStream
                );

            // Prompt the user to save the results.
            var result = await _fileSaver.SaveAsync(
                _browserFile.Name,
                decryptedStream,
                default
                );

            // Did we succeed?
            if (result.IsSuccessful)
            {
                // Let the caller know what happened.
                _snackbar.Add(
                    $"The file: {_browserFile.Name} was decrypted and saved.",
                    Severity.Success
                    );
                // Don't need this anymore.
                _browserFile = null;
            }
        }
        catch (Exception ex)
        {
            // Save the error message.
            Error = ex.Message;
        }
    }

    #endregion
}
